import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  CircularProgress,
  Alert,
  Button,
  Snackbar
} from '@mui/material';
import { ThemeProvider } from '@mui/material/styles';
import { cosplayTheme } from '../theme/cosplayTheme';

// Import the new components
import Header from '../components/layout/Header';
import Footer from '../components/layout/Footer';
import ProfileHeader from '../components/profile/ProfileHeader';
import ProfileTabs from '../components/profile/ProfileTabs';
import ProfileOverview from '../components/profile/ProfileOverview';
import ProfileGallery from '../components/profile/ProfileGallery';
import ProfileReviews from '../components/profile/ProfileReviews';

const ProfilePage = () => {
  const { userId } = useParams();
  const navigate = useNavigate();
  
  // State management
  const [user, setUser] = useState(null);
  const [profileUser, setProfileUser] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isFollowing, setIsFollowing] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  // Check if viewing own profile
  const isOwnProfile = !userId || user?.id === parseInt(userId);

  // Load current user from localStorage
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // Mock data for demonstration
  const mockProfileUser = {
    id: userId ? parseInt(userId) : user?.id || 1,
    firstName: userId ? 'Ng∆∞·ªùi d√πng kh√°c' : user?.firstName || 'Mai',
    lastName: userId ? 'H·ªì s∆°' : user?.lastName || 'Nguyen',
    email: userId ? 'other@cosplaydate.com' : user?.email || 'mai@cosplaydate.com',
    avatar: '/src/assets/cosplayer1.png',
    isVerified: true,
    isOnline: true,
    location: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh, Vi·ªát Nam',
    bio: 'Cosplayer chuy√™n nghi·ªáp chuy√™n v·ªÅ c√°c nh√¢n v·∫≠t anime v√† game. T√¥i y√™u th√≠ch vi·ªác t√°i hi·ªán c√°c nh√¢n v·∫≠t h∆∞ c·∫•u th√¥ng qua nh·ªØng b·ªô trang ph·ª•c chi ti·∫øt v√† di·ªÖn xu·∫•t ch√¢n th·ª±c. C√≥ th·ªÉ tham gia s·ª± ki·ªán, ch·ª•p ·∫£nh v√† h·ª£p t√°c.',
    rating: 4.9,
    reviewCount: 127,
    followersCount: 2453,
    followingCount: 892,
    responseTime: '< 1 gi·ªù',
    startingPrice: '500.000ƒë/gi·ªù',
    successRate: '98%',
    specialties: ['Anime', 'Game', 'Nh√¢n v·∫≠t g·ªëc', 'L·ªãch s·ª≠'],
    services: ['Ch·ª•p ·∫£nh', 'S·ª± ki·ªán', 'H·ªôi ngh·ªã', 'Phi√™n ri√™ng t∆∞', 'H∆∞·ªõng d·∫´n'],
  };

  const mockStats = {
    photos: 156,
    videos: 24,
    awards: 8,
    events: 45,
    favorites: 234,
    reviews: 127,
  };

  const mockSkills = [
    { name: 'Thi·∫øt k·∫ø trang ph·ª•c', level: 95, color: '#E91E63' },
    { name: 'Ngh·ªá thu·∫≠t trang ƒëi·ªÉm', level: 88, color: '#9C27B0' },
    { name: 'Di·ªÖn xu·∫•t nh√¢n v·∫≠t', level: 92, color: '#673AB7' },
    { name: 'Ch·ª•p ·∫£nh', level: 75, color: '#3F51B5' },
    { name: 'L√†m ƒë·∫°o c·ª•', level: 82, color: '#2196F3' },
  ];

  const mockRecentActivity = [
    {
      icon: 'üì∏',
      title: 'ƒê√£ t·∫£i ·∫£nh m·ªõi',
      description: 'ƒê√£ th√™m 5 ·∫£nh cosplay m·ªõi v√†o th∆∞ vi·ªán',
      time: '2 gi·ªù tr∆∞·ªõc'
    },
    {
      icon: '‚≠ê',
      title: 'Nh·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° 5 sao',
      description: 'Ph·∫£n h·ªìi tuy·ªát v·ªùi t·ª´ kh√°ch h√†ng ch·ª•p ·∫£nh g·∫ßn ƒë√¢y',
      time: '1 ng√†y tr∆∞·ªõc'
    },
    {
      icon: 'üé≠',
      title: 'Ho√†n th√†nh s·ª± ki·ªán',
      description: 'ƒê√£ ho√†n th√†nh th√†nh c√¥ng vi·ªác tham gia L·ªÖ h·ªôi Anime',
      time: '3 ng√†y tr∆∞·ªõc'
    },
    {
      icon: 'üèÜ',
      title: 'Nh·∫≠n gi·∫£i th∆∞·ªüng',
      description: 'Thi·∫øt k·∫ø trang ph·ª•c xu·∫•t s·∫Øc nh·∫•t t·∫°i Vietnam Comic Con',
      time: '1 tu·∫ßn tr∆∞·ªõc'
    },
  ];

  const mockPhotos = Array.from({ length: 24 }, (_, index) => ({
    id: index + 1,
    url: `/src/assets/cosplayer${(index % 8) + 1}.png`,
    title: `·∫¢nh Cosplay ${index + 1}`,
    description: `Bu·ªïi ch·ª•p ·∫£nh cosplay tuy·ªát v·ªùi #${index + 1}`,
    category: ['anime', 'game', 'g·ªëc', 's·ª± ki·ªán'][index % 4],
    likes: Math.floor(Math.random() * 500) + 50,
    tags: ['cosplay', 'anime', 'ch·ª•p ·∫£nh', 'nh√¢n v·∫≠t'],
  }));

  const mockReviews = Array.from({ length: 15 }, (_, index) => ({
    id: index + 1,
    user: {
      name: `Ng∆∞·ªùi d√πng ${index + 1}`,
      avatar: `/src/assets/cosplayer${(index % 8) + 1}.png`,
      verified: Math.random() > 0.5,
    },
    rating: Math.floor(Math.random() * 2) + 4, // 4-5 stars
    comment: `Cosplayer tuy·ªát v·ªùi! R·∫•t chuy√™n nghi·ªáp v√† t√†i nƒÉng. S·ª± ch√∫ √Ω ƒë·∫øn t·ª´ng chi ti·∫øt trong trang ph·ª•c th·∫≠t ƒë√°ng kinh ng·∫°c. Ch·∫Øc ch·∫Øn s·∫Ω ƒë·∫∑t l·∫°i cho c√°c s·ª± ki·ªán trong t∆∞∆°ng lai. ${index % 3 === 0 ? 'Bu·ªïi ch·ª•p ·∫£nh v∆∞·ª£t qu√° m·ªçi mong ƒë·ª£i c·ªßa t√¥i v√† k·∫øt qu·∫£ cu·ªëi c√πng th·∫≠t tuy·ªát ƒë·∫πp.' : ''}`,
    date: `${Math.floor(Math.random() * 30) + 1} ng√†y tr∆∞·ªõc`,
    helpfulCount: Math.floor(Math.random() * 20),
    tags: ['Chuy√™n nghi·ªáp', 'S√°ng t·∫°o', 'ƒê√∫ng gi·ªù', 'T√†i nƒÉng'][Math.floor(Math.random() * 4)] ? ['Chuy√™n nghi·ªáp'] : [],
    response: index % 5 === 0 ? 'C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu v√¨ ƒë√°nh gi√° tuy·ªát v·ªùi! Th·∫≠t vui khi ƒë∆∞·ª£c l√†m vi·ªác c√πng b·∫°n.' : null,
  }));

  // Load profile data
  useEffect(() => {
    const loadProfile = async () => {
      try {
        setLoading(true);
        setError(null);

        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));

        setProfileUser(mockProfileUser);
        setIsFollowing(Math.random() > 0.5); // Random follow status

      } catch (err) {
        setError('Kh√¥ng th·ªÉ t·∫£i h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i.');
        console.error('Profile loading error:', err);
      } finally {
        setLoading(false);
      }
    };

    loadProfile();
  }, [userId, user]);

  // Event handlers
  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    navigate('/');
  };

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  const handleEditProfile = () => {
    console.log('Edit profile clicked');
    showSnackbar('T√≠nh nƒÉng ch·ªânh s·ª≠a h·ªì s∆° s·∫Øp ra m·∫Øt!', 'info');
  };

  const handleEditAvatar = () => {
    console.log('Edit avatar clicked');
    showSnackbar('T√≠nh nƒÉng t·∫£i l√™n ·∫£nh ƒë·∫°i di·ªán s·∫Øp ra m·∫Øt!', 'info');
  };

  const handleFollowToggle = () => {
    setIsFollowing(!isFollowing);
    showSnackbar(
      isFollowing ? 'ƒê√£ b·ªè theo d√µi th√†nh c√¥ng' : 'ƒê√£ theo d√µi th√†nh c√¥ng', 
      'success'
    );
  };

  const handleAddPhoto = () => {
    console.log('Add photo clicked');
    showSnackbar('T√≠nh nƒÉng t·∫£i l√™n ·∫£nh s·∫Øp ra m·∫Øt!', 'info');
  };

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  // Render tab content
  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <ProfileOverview
            user={profileUser}
            stats={mockStats}
            recentActivity={mockRecentActivity}
            skills={mockSkills}
          />
        );
      case 'gallery':
        return (
          <ProfileGallery
            photos={mockPhotos}
            isOwnProfile={isOwnProfile}
            onAddPhoto={handleAddPhoto}
            loading={false}
          />
        );
      case 'videos':
        return (
          <Box sx={{ 
            p: 4, 
            textAlign: 'center',
            backgroundColor: 'rgba(255,255,255,0.95)',
            borderRadius: '16px',
            border: '1px solid rgba(233, 30, 99, 0.1)',
          }}>
            <h3>Ph·∫ßn Video</h3>
            <p>N·ªôi dung video s·∫Øp ra m·∫Øt!</p>
          </Box>
        );
      case 'reviews':
        return (
          <ProfileReviews
            reviews={mockReviews}
            overallRating={profileUser?.rating}
            totalReviews={mockStats.reviews}
            isOwnProfile={isOwnProfile}
          />
        );
      case 'events':
        return (
          <Box sx={{ 
            p: 4, 
            textAlign: 'center',
            backgroundColor: 'rgba(255,255,255,0.95)',
            borderRadius: '16px',
            border: '1px solid rgba(233, 30, 99, 0.1)',
          }}>
            <h3>Ph·∫ßn S·ª± ki·ªán</h3>
            <p>N·ªôi dung s·ª± ki·ªán s·∫Øp ra m·∫Øt!</p>
          </Box>
        );
      case 'achievements':
        return (
          <Box sx={{ 
            p: 4, 
            textAlign: 'center',
            backgroundColor: 'rgba(255,255,255,0.95)',
            borderRadius: '16px',
            border: '1px solid rgba(233, 30, 99, 0.1)',
          }}>
            <h3>Ph·∫ßn Th√†nh t√≠ch</h3>
            <p>Gi·∫£i th∆∞·ªüng v√† th√†nh t√≠ch s·∫Øp ra m·∫Øt!</p>
          </Box>
        );
      case 'favorites':
        return (
          <Box sx={{ 
            p: 4, 
            textAlign: 'center',
            backgroundColor: 'rgba(255,255,255,0.95)',
            borderRadius: '16px',
            border: '1px solid rgba(233, 30, 99, 0.1)',
          }}>
            <h3>Ph·∫ßn Y√™u th√≠ch</h3>
            <p>N·ªôi dung y√™u th√≠ch c·ªßa b·∫°n s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y!</p>
          </Box>
        );
      default:
        return null;
    }
  };

  // Loading state
  if (loading) {
    return (
      <ThemeProvider theme={cosplayTheme}>
        <Box sx={{ minHeight: '100vh', backgroundColor: '#FFE8F5' }}>
          <Header user={user} onLogout={handleLogout} />
          <Container maxWidth="lg" sx={{ py: 8, textAlign: 'center' }}>
            <CircularProgress size={60} sx={{ color: 'primary.main' }} />
            <Box sx={{ mt: 2 }}>
              <h3>ƒêang t·∫£i h·ªì s∆°...</h3>
            </Box>
          </Container>
          <Footer />
        </Box>
      </ThemeProvider>
    );
  }

  // Error state
  if (error) {
    return (
      <ThemeProvider theme={cosplayTheme}>
        <Box sx={{ minHeight: '100vh', backgroundColor: '#FFE8F5' }}>
          <Header user={user} onLogout={handleLogout} />
          <Container maxWidth="lg" sx={{ py: 8 }}>
            <Alert 
              severity="error" 
              sx={{ mb: 4, borderRadius: '12px' }}
              action={
                <Button color="inherit" onClick={() => window.location.reload()}>
                  Th·ª≠ l·∫°i
                </Button>
              }
            >
              {error}
            </Alert>
          </Container>
          <Footer />
        </Box>
      </ThemeProvider>
    );
  }

  return (
    <ThemeProvider theme={cosplayTheme}>
      <Box sx={{ minHeight: '100vh', backgroundColor: '#FFE8F5' }}>
        <Header user={user} onLogout={handleLogout} />
        
        <Container maxWidth="lg" sx={{ py: 4 }}>
          {/* Profile Header */}
          <ProfileHeader
            user={profileUser}
            isOwnProfile={isOwnProfile}
            onEditProfile={handleEditProfile}
            onEditAvatar={handleEditAvatar}
            onFollowToggle={handleFollowToggle}
            isFollowing={isFollowing}
          />

          {/* Profile Tabs */}
          <ProfileTabs
            activeTab={activeTab}
            onTabChange={handleTabChange}
            isOwnProfile={isOwnProfile}
            counts={mockStats}
          />

          {/* Tab Content */}
          <Box sx={{ minHeight: '400px' }}>
            {renderTabContent()}
          </Box>
        </Container>

        <Footer />

        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert 
            onClose={handleCloseSnackbar} 
            severity={snackbar.severity}
            sx={{ borderRadius: '12px' }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </ThemeProvider>
  );
};

export default ProfilePage;