// <auto-generated />
using System;
using CosplayDate.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CosplayDate.Infrastructure.Migrations
{
    [DbContext(typeof(CosplayDateDbContext))]
    [Migration("20250714030626_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CosplayDate.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Bookings__3214EC07CD603422");

                    b.HasIndex(new[] { "BookingDate" }, "IX_Bookings_BookingDate");

                    b.HasIndex(new[] { "CosplayerId" }, "IX_Bookings_CosplayerId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Bookings_CustomerId");

                    b.HasIndex(new[] { "Status" }, "IX_Bookings_Status");

                    b.HasIndex(new[] { "BookingCode" }, "UQ__Bookings__C6E56BD511E8ACFC")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<int?>("CosplayerUnreadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerUnreadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Conversa__3214EC07E2AB6803");

                    b.HasIndex("LastMessageId");

                    b.HasIndex(new[] { "CosplayerId" }, "IX_Conversations_CosplayerId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Conversations_CustomerId");

                    b.HasIndex(new[] { "LastMessageAt" }, "IX_Conversations_LastMessageAt")
                        .IsDescending();

                    b.HasIndex(new[] { "CustomerId", "CosplayerId" }, "UQ__Conversa__0C14540A7F1AC4CD")
                        .IsUnique();

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Cosplayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CharacterSpecialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FollowersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("ResponseTime")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("< 1 hour");

                    b.Property<decimal?>("SuccessRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0.0m);

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TotalReviews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Cosplaye__3214EC07ADCE4DE7");

                    b.HasIndex(new[] { "Category" }, "IX_Cosplayers_Category");

                    b.HasIndex(new[] { "CharacterSpecialty" }, "IX_Cosplayers_CharacterSpecialty");

                    b.HasIndex(new[] { "IsAvailable" }, "IX_Cosplayers_IsAvailable");

                    b.HasIndex(new[] { "Rating" }, "IX_Cosplayers_Rating")
                        .IsDescending();

                    b.HasIndex(new[] { "UserId" }, "UQ__Cosplaye__1788CC4DC8B670FC")
                        .IsUnique();

                    b.ToTable("Cosplayers");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("IsPortfolio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK__Cosplaye__3214EC07ABCF1D15");

                    b.HasIndex("CosplayerId");

                    b.ToTable("CosplayerPhotos");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Cosplaye__3214EC0721A51E0C");

                    b.HasIndex("CosplayerId");

                    b.ToTable("CosplayerServices");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Cosplaye__3214EC075D47F902");

                    b.HasIndex(new[] { "CosplayerId", "Specialty" }, "UQ__Cosplaye__79169320E3619B50")
                        .IsUnique();

                    b.ToTable("CosplayerSpecialties");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("LikesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK__Cosplaye__3214EC07E4899EBE");

                    b.HasIndex("CosplayerId");

                    b.ToTable("CosplayerVideos");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.EmailVerificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__EmailVer__3214EC0734806215");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.EscrowTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__EscrowTr__3214EC079213871B");

                    b.HasIndex("BookingId");

                    b.HasIndex("CosplayerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("EscrowTransactions");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("EntryFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("EventTime")
                        .HasColumnType("time");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Events__3214EC072B3F73D6");

                    b.HasIndex(new[] { "EventDate" }, "IX_Events_EventDate");

                    b.HasIndex(new[] { "EventType" }, "IX_Events_EventType");

                    b.HasIndex(new[] { "IsActive" }, "IX_Events_IsActive");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipationType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("attendee");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("registered");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__EventPar__3214EC0781E7CCD3");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "EventId", "UserId" }, "UQ__EventPar__A83C44D55825C1F9")
                        .IsUnique();

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Favorite__3214EC0782589EAE");

                    b.HasIndex("CosplayerId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Favorites_CustomerId");

                    b.HasIndex(new[] { "CustomerId", "CosplayerId" }, "UQ__Favorite__0C14540AAEBD8AFD")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MessageType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Messages__3214EC076252B8DF");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex(new[] { "ConversationId" }, "IX_Messages_ConversationId");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Messages_CreatedAt")
                        .IsDescending();

                    b.HasIndex(new[] { "IsRead" }, "IX_Messages_IsRead");

                    b.HasIndex(new[] { "SenderId" }, "IX_Messages_SenderId");

                    b.ToTable("Messages", t =>
                        {
                            t.HasTrigger("TR_Messages_UpdateConversation");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.MessageReadReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__MessageR__3214EC074E95A8E2");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "MessageId", "UserId" }, "UQ__MessageR__190480590BB02837")
                        .IsUnique();

                    b.ToTable("MessageReadReceipts");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("PublishedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK__News__3214EC07946F66D4");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3214EC074D223B82");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Notifications_CreatedAt")
                        .IsDescending();

                    b.HasIndex(new[] { "IsRead" }, "IX_Notifications_IsRead");

                    b.HasIndex(new[] { "UserId" }, "IX_Notifications_UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Password__3214EC07B55EE026");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProcessingFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__Payments__3214EC07BD379C51");

                    b.HasIndex(new[] { "BookingId" }, "IX_Payments_BookingId");

                    b.HasIndex(new[] { "Status" }, "IX_Payments_Status");

                    b.HasIndex(new[] { "PaymentCode" }, "UQ__Payments__106D3BA8672B5F6A")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.PhotoLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__PhotoLik__3214EC079683F376");

                    b.HasIndex(new[] { "PhotoId" }, "IX_PhotoLikes_PhotoId");

                    b.HasIndex(new[] { "UserId" }, "IX_PhotoLikes_UserId");

                    b.HasIndex(new[] { "PhotoId", "UserId" }, "UQ__PhotoLik__F0CF392760E4DD51")
                        .IsUnique();

                    b.ToTable("PhotoLikes", t =>
                        {
                            t.HasTrigger("TR_PhotoLikes_UpdateCount");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.PhotoTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__PhotoTag__3214EC07BF6915E4");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotoTags");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CosplayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("HelpfulCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("OwnerResponse")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("OwnerResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Reviews__3214EC076A65565C");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "CosplayerId" }, "IX_Reviews_CosplayerId");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Reviews_CreatedAt")
                        .IsDescending();

                    b.HasIndex(new[] { "Rating" }, "IX_Reviews_Rating");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Reviews__73951AECBBF74741")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.ReviewHelpfulVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("bit");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ReviewHe__3214EC076BDAAFB6");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ReviewId", "UserId" }, "UQ__ReviewHe__A5C4F50B83500551")
                        .IsUnique();

                    b.ToTable("ReviewHelpfulVotes");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.ReviewTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__ReviewTa__3214EC072AD54D7F");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewTags");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__SystemSe__3214EC070067C527");

                    b.HasIndex(new[] { "SettingKey" }, "UQ__SystemSe__01E719AD5519F677")
                        .IsUnique();

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoyaltyPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MembershipTier")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Bronze");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("ProfileCompleteness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Customer");

                    b.Property<decimal?>("WalletBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC0797384CF7");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email");

                    b.HasIndex(new[] { "IsOnline" }, "IX_Users_IsOnline");

                    b.HasIndex(new[] { "UserType" }, "IX_Users_UserType");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053448C6A63F")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.UserFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__UserFoll__3214EC07697D9CEF");

                    b.HasIndex(new[] { "FollowedId" }, "IX_UserFollows_FollowedId");

                    b.HasIndex(new[] { "FollowerId" }, "IX_UserFollows_FollowerId");

                    b.HasIndex(new[] { "FollowerId", "FollowedId" }, "UQ__UserFoll__F7A5FC9EC9A8DB8D")
                        .IsUnique();

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.UserInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Interest")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__UserInte__3214EC077213D4D2");

                    b.HasIndex(new[] { "UserId", "Interest" }, "UQ__UserInte__7B88AA10BE90D834")
                        .IsUnique();

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__UserSess__3214EC07E22530D5");

                    b.HasIndex(new[] { "Token" }, "IX_UserSessions_Token");

                    b.HasIndex(new[] { "UserId" }, "IX_UserSessions_UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Completed");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__WalletTr__3214EC076EFFC5CF");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_WalletTransactions_CreatedAt")
                        .IsDescending();

                    b.HasIndex(new[] { "UserId" }, "IX_WalletTransactions_UserId");

                    b.HasIndex(new[] { "TransactionCode" }, "UQ__WalletTr__D85E70267043D040")
                        .IsUnique();

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Booking", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("Bookings")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Cospla__1F98B2C1");

                    b.HasOne("CosplayDate.Domain.Entities.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Custom__1EA48E88");

                    b.Navigation("Cosplayer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "Cosplayer")
                        .WithMany("ConversationCosplayers")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Conversat__Cospl__08B54D69");

                    b.HasOne("CosplayDate.Domain.Entities.User", "Customer")
                        .WithMany("ConversationCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Conversat__Custo__07C12930");

                    b.HasOne("CosplayDate.Domain.Entities.Message", "LastMessage")
                        .WithMany("Conversations")
                        .HasForeignKey("LastMessageId")
                        .HasConstraintName("FK_Conversations_LastMessage");

                    b.Navigation("Cosplayer");

                    b.Navigation("Customer");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Cosplayer", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithOne("Cosplayer")
                        .HasForeignKey("CosplayDate.Domain.Entities.Cosplayer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Cosplayer__UserI__5AEE82B9");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerPhoto", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("CosplayerPhotos")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Cosplayer__Cospl__693CA210");

                    b.Navigation("Cosplayer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerService", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("CosplayerServices")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Cosplayer__Cospl__619B8048");

                    b.Navigation("Cosplayer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerSpecialty", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("CosplayerSpecialties")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Cosplayer__Cospl__5EBF139D");

                    b.Navigation("Cosplayer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerVideo", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("CosplayerVideos")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Cosplayer__Cospl__787EE5A0");

                    b.Navigation("Cosplayer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.EmailVerificationToken", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("EmailVerificationTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__EmailVeri__UserI__4F7CD00D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.EscrowTransaction", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany()
                        .HasForeignKey("CosplayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosplayDate.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosplayDate.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Cosplayer");

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.EventParticipant", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__EventPart__Event__59C55456");

                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__EventPart__UserI__5AB9788F");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("Favorites")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__Cospl__43D61337");

                    b.HasOne("CosplayDate.Domain.Entities.User", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__Custo__42E1EEFE");

                    b.Navigation("Cosplayer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Message", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__Conver__0F624AF8");

                    b.HasOne("CosplayDate.Domain.Entities.Message", "ReplyToMessage")
                        .WithMany("InverseReplyToMessage")
                        .HasForeignKey("ReplyToMessageId")
                        .HasConstraintName("FK__Messages__ReplyT__114A936A");

                    b.HasOne("CosplayDate.Domain.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__Sender__10566F31");

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.MessageReadReceipt", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Message", "Message")
                        .WithMany("MessageReadReceipts")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("FK__MessageRe__Messa__160F4887");

                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("MessageReadReceipts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__MessageRe__UserI__17036CC0");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__4C6B5938");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__PasswordR__UserI__4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Payment", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Bookin__3864608B");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.PhotoLike", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.CosplayerPhoto", "Photo")
                        .WithMany("PhotoLikes")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("FK__PhotoLike__Photo__70DDC3D8");

                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("PhotoLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__PhotoLike__UserI__71D1E811");

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.PhotoTag", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.CosplayerPhoto", "Photo")
                        .WithMany("PhotoTags")
                        .HasForeignKey("PhotoId")
                        .IsRequired()
                        .HasConstraintName("FK__PhotoTags__Photo__6C190EBB");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Review", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("CosplayDate.Domain.Entities.Review", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__Booking__2739D489");

                    b.HasOne("CosplayDate.Domain.Entities.Cosplayer", "Cosplayer")
                        .WithMany("Reviews")
                        .HasForeignKey("CosplayerId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__Cosplay__29221CFB");

                    b.HasOne("CosplayDate.Domain.Entities.User", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__Custome__282DF8C2");

                    b.Navigation("Booking");

                    b.Navigation("Cosplayer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.ReviewHelpfulVote", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Review", "Review")
                        .WithMany("ReviewHelpfulVotes")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewHel__Revie__30C33EC3");

                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("ReviewHelpfulVotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewHel__UserI__31B762FC");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.ReviewTag", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.Review", "Review")
                        .WithMany("ReviewTags")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewTag__Revie__2BFE89A6");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.UserFollow", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "Followed")
                        .WithMany("UserFollowFolloweds")
                        .HasForeignKey("FollowedId")
                        .IsRequired()
                        .HasConstraintName("FK__UserFollo__Follo__7E37BEF6");

                    b.HasOne("CosplayDate.Domain.Entities.User", "Follower")
                        .WithMany("UserFollowFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK__UserFollo__Follo__7D439ABD");

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.UserInterest", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserInter__UserI__47A6A41B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserSessi__UserI__45F365D3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("CosplayDate.Domain.Entities.User", "User")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__WalletTra__UserI__3E1D39E1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Cosplayer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CosplayerPhotos");

                    b.Navigation("CosplayerServices");

                    b.Navigation("CosplayerSpecialties");

                    b.Navigation("CosplayerVideos");

                    b.Navigation("Favorites");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.CosplayerPhoto", b =>
                {
                    b.Navigation("PhotoLikes");

                    b.Navigation("PhotoTags");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Message", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("InverseReplyToMessage");

                    b.Navigation("MessageReadReceipts");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.Review", b =>
                {
                    b.Navigation("ReviewHelpfulVotes");

                    b.Navigation("ReviewTags");
                });

            modelBuilder.Entity("CosplayDate.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ConversationCosplayers");

                    b.Navigation("ConversationCustomers");

                    b.Navigation("Cosplayer");

                    b.Navigation("EmailVerificationTokens");

                    b.Navigation("EventParticipants");

                    b.Navigation("Favorites");

                    b.Navigation("MessageReadReceipts");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("PhotoLikes");

                    b.Navigation("ReviewHelpfulVotes");

                    b.Navigation("Reviews");

                    b.Navigation("UserFollowFolloweds");

                    b.Navigation("UserFollowFollowers");

                    b.Navigation("UserInterests");

                    b.Navigation("UserSessions");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
